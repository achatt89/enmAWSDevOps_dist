{"version":3,"sources":["api/clone/clone.controller.js"],"names":["index","aws","require","config","update","region","ec2","EC2","request","response","createAMIParams","InstanceId","body","instanceId","Name","instanceName","BlockDeviceMappings","DeviceName","Ebs","DeleteOnTermination","Description","DryRun","NoReboot","createImage","error","data","json","console","log","ImageId","waitForAMIState","runInstanceParams","MaxCount","MinCount","InstanceInitiatedShutdownBehavior","KeyName","keyName","InstanceType","instanceType","TagSpecifications","ResourceType","Tags","Key","Value","waitForParams","ImageIds","deRegisterImageParams","waitFor","runInstance","deleteImage","deregisterImage","send","runInstances","callback"],"mappings":"AAAA;;;;;AAKA;;;;;QAUgBA,K,GAAAA,K;AARhB,IAAIC,MAAMC,QAAQ,SAAR,CAAV;AACA;;AAEAD,IAAIE,MAAJ,CAAWC,MAAX,CAAkB,EAACC,QAAQ,WAAT,EAAlB;;AAEA,IAAIC,MAAM,IAAIL,IAAIM,GAAR,EAAV;;AAEA;AACO,SAASP,KAAT,CAAeQ,OAAf,EAAwBC,QAAxB,EAAkC;AACvC,MAAIC,kBAAkB;AACpBC,gBAAYH,QAAQI,IAAR,CAAaC,UADL;AAEpBC,UAAMN,QAAQI,IAAR,CAAaG,YAFC;AAGpBC,yBAAqB,CAAC;AACpBC,kBAAY,WADQ;AAEpBC,WAAK;AACHC,6BAAqB;AADlB;AAFe,KAAD,CAHD;AASpBC,iBAAa,iBATO;AAUpBC,YAAQ,KAVY;AAWpBC,cAAU;AAXU,GAAtB;;AAcA;AACAhB,MAAIiB,WAAJ,CAAgBb,eAAhB,EAAiC,UAAUc,KAAV,EAAiBC,IAAjB,EAAuB;AACtD,QAAID,KAAJ,EAAW;AACTf,eAASiB,IAAT,CAAcF,KAAd;AACD,KAFD,MAEO;AACLG,cAAQC,GAAR,CAAYH,KAAKI,OAAjB;AACAC,sBAAgBL,IAAhB;AACD;AACF,GAPD;;AASA,WAASK,eAAT,CAAyBL,IAAzB,EAA+B;AAC7B,QAAIM,oBAAoB;AACtBF,eAASJ,KAAKI,OADQ;AAEtBG,gBAAU,CAFY;AAGtBC,gBAAU,CAHY;AAItBjB,2BAAqB,CAAC;AACpBC,oBAAY,WADQ;AAEpBC,aAAK;AACHC,+BAAqB;AADlB;AAFe,OAAD,CAJC;AAUtBE,cAAQ,KAVc;AAWtBa,yCAAmC,MAXb;AAYtBC,eAAS3B,QAAQI,IAAR,CAAawB,OAZA;AAatBC,oBAAc7B,QAAQI,IAAR,CAAa0B,YAbL;AActBC,yBAAmB,CAAC;AAClBC,sBAAc,UADI;AAElBC,cAAM,CAAC;AACLC,eAAK,MADA;AAELC,iBAAOnC,QAAQI,IAAR,CAAaG;AAFf,SAAD;AAFY,OAAD;AAdG,KAAxB;;AAuBA,QAAI6B,gBAAgB;AAClBC,gBAAU,CAACpB,KAAKI,OAAN;AADQ,KAApB;;AAIA,QAAIiB,wBAAwB;AAC1BjB,eAASJ,KAAKI;AADY,KAA5B;;AAIA;AACAvB,QAAIyC,OAAJ,CAAY,gBAAZ,EAA8BH,aAA9B,EAA6C,UAAUpB,KAAV,EAAiBC,IAAjB,EAAuB;AAClE,UAAID,KAAJ,EAAW;AACTf,iBAASiB,IAAT,CAAcF,KAAd;AACD,OAFD,MAEO;AACLG,gBAAQC,GAAR,CAAY,YAAZ,EAA0BH,IAA1B;AACA,YAAIA,IAAJ,EAAU;;AAER;AACAuB,sBAAYjB,iBAAZ,EAA+Be,qBAA/B;AACD;AACF;AACF,KAXD;AAYD;;AAED,WAASG,WAAT,CAAqBH,qBAArB,EAA4C;AAC1CxC,QAAI4C,eAAJ,CAAoBJ,qBAApB,EAA2C,UAAUtB,KAAV,EAAiBC,IAAjB,EAAuB;AAChE,UAAID,KAAJ,EAAW;AACTf,iBAASiB,IAAT,CAAcF,KAAd;AACD,OAFD,MAEO;AACLG,gBAAQC,GAAR,CAAY,eAAZ,EAA6BH,IAA7B;AACAhB,iBAAS0C,IAAT,CAAc1B,IAAd;AACD;AACF,KAPD;AAQD;;AAED,WAASuB,WAAT,CAAqBjB,iBAArB,EAAwC;AACtCzB,QAAI8C,YAAJ,CAAiBrB,iBAAjB,EAAoC,UAAUP,KAAV,EAAiBC,IAAjB,EAAuB;AACzD,UAAID,KAAJ,EAAW;AACTf,iBAASiB,IAAT,CAAcF,KAAd;;AAEA;AACAyB;AACD,OALD,MAKO;AACLtB,gBAAQC,GAAR,CAAY,uBAAZ,EAAqCH,IAArC;AACA4B,iBAAS5B,IAAT;AACD;AACF,KAVD;AAWD;;AAED,WAAS4B,QAAT,CAAkB5B,IAAlB,EAAwB;AACtBhB,aAAS0C,IAAT,CAAc1B,IAAd;AACD;AACF","file":"clone.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/restarts              ->  index\n */\n\n'use strict';\n\nlet aws = require('aws-sdk');\n// var util = require('util');\n\naws.config.update({region: 'eu-west-1'});\n\nlet ec2 = new aws.EC2();\n\n// Restarts an Instance\nexport function index(request, response) {\n  let createAMIParams = {\n    InstanceId: request.body.instanceId,\n    Name: request.body.instanceName,\n    BlockDeviceMappings: [{\n      DeviceName: '/dev/sda1',\n      Ebs: {\n        DeleteOnTermination: true\n      }\n    }],\n    Description: 'Cloned Instance',\n    DryRun: false,\n    NoReboot: true\n  };\n\n  //Create AMI based on the instanceID\n  ec2.createImage(createAMIParams, function (error, data) {\n    if (error) {\n      response.json(error);\n    } else {\n      console.log(data.ImageId);\n      waitForAMIState(data);\n    }\n  });\n\n  function waitForAMIState(data) {\n    let runInstanceParams = {\n      ImageId: data.ImageId,\n      MaxCount: 1,\n      MinCount: 1,\n      BlockDeviceMappings: [{\n        DeviceName: '/dev/sda1',\n        Ebs: {\n          DeleteOnTermination: true,\n        },\n      }],\n      DryRun: false,\n      InstanceInitiatedShutdownBehavior: 'stop',\n      KeyName: request.body.keyName,\n      InstanceType: request.body.instanceType,\n      TagSpecifications: [{\n        ResourceType: 'instance',\n        Tags: [{\n          Key: 'Name',\n          Value: request.body.instanceName\n        }]\n      }]\n    };\n\n    let waitForParams = {\n      ImageIds: [data.ImageId],\n    };\n\n    let deRegisterImageParams = {\n      ImageId: data.ImageId\n    };\n\n    //Wait for new Image to have the ready state\n    ec2.waitFor('imageAvailable', waitForParams, function (error, data) {\n      if (error) {\n        response.json(error);\n      } else {\n        console.log('WAIT FOR: ', data);\n        if (data) {\n\n          //Create Instance from AMI Image\n          runInstance(runInstanceParams, deRegisterImageParams);\n        }\n      }\n    });\n  }\n\n  function deleteImage(deRegisterImageParams) {\n    ec2.deregisterImage(deRegisterImageParams, function (error, data) {\n      if (error) {\n        response.json(error);\n      } else {\n        console.log('Deleted AMI: ', data);\n        response.send(data);\n      }\n    });\n  }\n\n  function runInstance(runInstanceParams) {\n    ec2.runInstances(runInstanceParams, function (error, data) {\n      if (error) {\n        response.json(error);\n\n        //Delete AMI if not successful\n        deleteImage();\n      } else {\n        console.log('RUN INSTANCE OUTPUT: ', data);\n        callback(data);\n      }\n    });\n  }\n\n  function callback(data) {\n    response.send(data);\n  }\n}\n"]}