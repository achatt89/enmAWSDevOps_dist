{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","set","engine","require","renderFile","urlencoded","extended","json","webpackDevMiddleware","stripAnsi","webpack","makeWebpackConfig","webpackConfig","DEV","compiler","browserSync","create","init","open","logFileChanges","proxy","port","ws","middleware","noInfo","stats","colors","timings","chunks","browserSyncPort","plugins","plugin","console","log","hasErrors","hasWarnings","sockets","emit","title","body","toString","timeout","reload"],"mappings":"AAAA;;;;AAIA;;;;;;kBAce,UAASA,GAAT,EAAc;AAC3B,MAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEA,MAAGD,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AAC1CD,QAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,eAAKC,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACD;;AAED,MAAGL,QAAQ,YAAX,EAAyB;AACvBD,QAAIG,GAAJ,CAAQ,4BAAQ,eAAKE,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACD;;AAEDN,MAAIO,GAAJ,CAAQ,SAAR,EAAmB,eAAKF,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAN,MAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAeJ,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,MAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,MAAIO,GAAJ,CAAQ,OAAR,EAAoB,sBAAOD,IAA3B;AACAN,MAAIQ,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAV,MAAIO,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAP,MAAIG,GAAJ,CAAQ,0BAAR;AACAH,MAAIG,GAAJ,CAAQ,qBAAWQ,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAZ,MAAIG,GAAJ,CAAQ,qBAAWU,IAAX,EAAR;AACAb,MAAIG,GAAJ,CAAQ,+BAAR;AACAH,MAAIG,GAAJ,CAAQ,6BAAR;;AAGA,MAAGF,QAAQ,aAAX,EAA0B;AACxB,QAAMa,uBAAuBL,QAAQ,wBAAR,CAA7B;AACA,QAAMM,YAAYN,QAAQ,YAAR,CAAlB;AACA,QAAMO,UAAUP,QAAQ,SAAR,CAAhB;AACA,QAAMQ,oBAAoBR,QAAQ,oBAAR,CAA1B;AACA,QAAMS,gBAAgBD,kBAAkB,EAAEE,KAAK,IAAP,EAAlB,CAAtB;AACA,QAAMC,WAAWJ,QAAQE,aAAR,CAAjB;AACA,QAAMG,cAAcZ,QAAQ,cAAR,EAAwBa,MAAxB,EAApB;;AAEA;;;AAGAD,gBAAYE,IAAZ,CAAiB;AACfC,YAAM,KADS;AAEfC,sBAAgB,KAFD;AAGfC,4BAAoB,sBAAOC,IAHZ;AAIfC,UAAI,IAJW;AAKfC,kBAAY,CACVf,qBAAqBM,QAArB,EAA+B;AAC7BU,gBAAQ,KADqB;AAE7BC,eAAO;AACLC,kBAAQ,IADH;AAELC,mBAAS,IAFJ;AAGLC,kBAAQ;AAHH;AAFsB,OAA/B,CADU,CALG;AAefP,YAAM,sBAAOQ,eAfE;AAgBfC,eAAS,CAAC,uBAAD;AAhBM,KAAjB;;AAmBA;;;;AAIAhB,aAASiB,MAAT,CAAgB,MAAhB,EAAwB,UAASN,KAAT,EAAgB;AACtCO,cAAQC,GAAR,CAAY,mBAAZ;AACA,UAAGR,MAAMS,SAAN,MAAqBT,MAAMU,WAAN,EAAxB,EAA6C;AAC3C,eAAOpB,YAAYqB,OAAZ,CAAoBC,IAApB,CAAyB,oBAAzB,EAA+C;AACpDC,iBAAO,gBAD6C;AAEpDC,gBAAM9B,UAAUgB,MAAMe,QAAN,EAAV,CAF8C;AAGpDC,mBAAS;AAH2C,SAA/C,CAAP;AAKD;AACD1B,kBAAY2B,MAAZ;AACD,KAVD;AAWD;;AAED,MAAG/C,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AAC1CD,QAAIG,GAAJ,CAAQ,6BAAR,EAD0C,CACjB;AAC1B;AACF,C;;AAxFD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport shrinkRay from 'shrink-ray';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\n\nimport config from './environment';\n\nexport default function(app) {\n  var env = app.get('env');\n\n  if(env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')));\n  }\n\n  if(env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n  app.use(express.static(app.get('appPath')));\n  app.use(morgan('dev'));\n\n  app.set('views', `${config.root}/server/views`);\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(shrinkRay());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n\n\n  if(env === 'development') {\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const stripAnsi = require('strip-ansi');\n    const webpack = require('webpack');\n    const makeWebpackConfig = require('../../webpack.make');\n    const webpackConfig = makeWebpackConfig({ DEV: true });\n    const compiler = webpack(webpackConfig);\n    const browserSync = require('browser-sync').create();\n\n    /**\n     * Run Browsersync and use middleware for Hot Module Replacement\n     */\n    browserSync.init({\n      open: false,\n      logFileChanges: false,\n      proxy: `localhost:${config.port}`,\n      ws: true,\n      middleware: [\n        webpackDevMiddleware(compiler, {\n          noInfo: false,\n          stats: {\n            colors: true,\n            timings: true,\n            chunks: false\n          }\n        })\n      ],\n      port: config.browserSyncPort,\n      plugins: ['bs-fullscreen-message']\n    });\n\n    /**\n     * Reload all devices when bundle is complete\n     * or send a fullscreen error message to the browser instead\n     */\n    compiler.plugin('done', function(stats) {\n      console.log('webpack done hook');\n      if(stats.hasErrors() || stats.hasWarnings()) {\n        return browserSync.sockets.emit('fullscreen:message', {\n          title: 'Webpack Error:',\n          body: stripAnsi(stats.toString()),\n          timeout: 100000\n        });\n      }\n      browserSync.reload();\n    });\n  }\n\n  if(env === 'development' || env === 'test') {\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"]}